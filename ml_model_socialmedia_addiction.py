# -*- coding: utf-8 -*-
"""ML_Model_SocialMedia_Addiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2zqV9k7yzzednTMantbDbPVOa-rFnaX
"""

# -----------------------------------------
# 📦 Βήμα 1: Εισαγωγή Βιβλιοθηκών
# -----------------------------------------
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# -----------------------------------------
# 📂 Βήμα 2: Φόρτωση Dataset (από GitHub)
# -----------------------------------------
url = "https://raw.githubusercontent.com/giwrgoskoutsoudis/AI-Project/main/Students%20Social%20Media%20Addiction.csv"
df = pd.read_csv(url)

# -----------------------------------------
# 👀 Βήμα 3: Εξερεύνηση Δεδομένων
# -----------------------------------------
print("Shape:", df.shape)
print(df.head())
print(df.info())
print(df.isnull().sum())

# -----------------------------------------
# 🧼 Βήμα 4: Καθαρισμός + Δημιουργία target
# -----------------------------------------
def categorize(score):
    if score <= 3:
        return "Low"
    elif score <= 6:
        return "Medium"
    else:
        return "High"

df["Addicted_Level"] = df["Addicted_Score"].apply(categorize)
df.drop("Student_ID", axis=1, inplace=True)

# -----------------------------------------
# 🔠 Βήμα 5: Κωδικοποίηση Κατηγορικών
# -----------------------------------------
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == "object":
        df[col] = le.fit_transform(df[col].astype(str))

# -----------------------------------------
# 🎯 Βήμα 6: Ορισμός Χ και y
# -----------------------------------------
X = df.drop(["Addicted_Score", "Addicted_Level"], axis=1)
y = df["Addicted_Level"]

# -----------------------------------------
# 🧪 Βήμα 7: Χωρισμός Δεδομένων
# -----------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------------------
# 🤖 Βήμα 8: Εκπαίδευση Μοντέλου
# -----------------------------------------
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# -----------------------------------------
# 📊 Βήμα 9: Αξιολόγηση
# -----------------------------------------
y_pred = model.predict(X_test)
print("✅ Accuracy:", accuracy_score(y_test, y_pred))
print("\n📋 Classification Report:\n", classification_report(y_test, y_pred))
print("\n📉 Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# -----------------------------------------
# 🤖 Step 10: AI Agent – Predict, Explain & Advise
# -----------------------------------------

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# 🔁 Προετοιμασία δεδομένων για εκπαίδευση (1 φορά πριν τον agent)
df = pd.read_csv("Students Social Media Addiction.csv")

def categorize(score):
    if score <= 3:
        return 0  # Low
    elif score <= 6:
        return 1  # Medium
    else:
        return 2  # High

df["Addicted_Level"] = df["Addicted_Score"].apply(categorize)
df.drop("Student_ID", axis=1, inplace=True)

le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == "object":
        df[col] = le.fit_transform(df[col].astype(str))

X = df.drop(["Addicted_Score", "Addicted_Level"], axis=1)
y = df["Addicted_Level"]

model = RandomForestClassifier(random_state=42)
model.fit(X, y)

# 🚀 Start AI Agent interaction
print("📋 Σε παρακαλώ απάντησε στις παρακάτω ερωτήσεις για να γίνει πρόβλεψη:")

# Είσοδοι χρήστη
age = int(input("🔢 Πόσο χρονών είσαι; "))
gender = input("⚧️ Φύλο (Male/Female): ")
academic_level = input("🎓 Ακαδημαϊκό επίπεδο (Undergraduate/Graduate): ")
country = input("🌍 Χώρα: ")
daily_usage = float(input("📱 Ώρες χρήσης social media ανά ημέρα (1, 2, 3, 4, 5 etc): "))
platform = input("📌 Πλατφόρμα που χρησιμοποιείς πιο πολύ (Instagram, Facebook etc): ")
academic_affect = input("📚 Επηρεάζει τις σπουδές σου; (Yes/No): ")
sleep_hours = float(input("😴 Ώρες ύπνου ανά νύχτα: "))
mental_score = int(input("🧠 Ψυχική υγεία (1-10): "))
relationship = input("💞 Κατάσταση σχέσης (Single/In Relationship): ")
conflicts = int(input("💬 Διαφωνίες λόγω social media ανά εβδομάδα (1-10): "))

# 🔄 Δημιουργία DataFrame εισόδου
user_input = {
    "Age": age,
    "Gender": gender,
    "Academic_Level": academic_level,
    "Country": country,
    "Avg_Daily_Usage_Hours": daily_usage,
    "Most_Used_Platform": platform,
    "Affects_Academic_Performance": academic_affect,
    "Sleep_Hours_Per_Night": sleep_hours,
    "Mental_Health_Score": mental_score,
    "Relationship_Status": relationship,
    "Conflicts_Over_Social_Media": conflicts
}
user_df = pd.DataFrame([user_input])

# Κωδικοποίηση
for col in user_df.columns:
    if user_df[col].dtype == "object":
        user_df[col] = le.fit_transform(user_df[col].astype(str))

# 🔮 Πρόβλεψη
prediction = model.predict(user_df)[0]
level_map = {0: "Low", 1: "Medium", 2: "High"}
predicted_level = level_map.get(prediction, prediction)

# 📢 Feedback
print(f"\n🔍 Το μοντέλο προβλέπει ότι έχεις **{predicted_level}** επίπεδο εθισμού στα social media.")

# 🧠 Εξήγηση με βάση input
if daily_usage > 5:
    print("💬 Η καθημερινή χρήση άνω των 5 ωρών επηρεάζει σημαντικά τον εθισμό.")
if sleep_hours < 6:
    print("💤 Ο λίγος ύπνος σχετίζεται με υψηλότερο επίπεδο εθισμού.")
if academic_affect.lower() == "yes":
    print("📚 Επηρεάζονται οι σπουδές σου – αυτό σχετίζεται με υψηλό επίπεδο χρήσης.")
if conflicts > 2:
    print("💢 Οι συγκρούσεις λόγω social media είναι δείγμα προβληματικής χρήσης.")

# ❓ What-if analysis
print("\n🧪 Τι θα γινόταν αν περιόριζες τη χρήση σε 2 ώρες την ημέρα;")
user_df_copy = user_df.copy()
user_df_copy["Avg_Daily_Usage_Hours"] = 2
what_if_pred = model.predict(user_df_copy)[0]
what_if_level = level_map.get(what_if_pred, what_if_pred)
print(f"➡️ Η πρόβλεψη τότε θα ήταν: {what_if_level}")

# 📄 Mini Report
print("\n📄 Συνοπτικό Feedback:")
print(f"- Ηλικία: {age}, Ύπνος: {sleep_hours} ώρες, Ψυχική υγεία: {mental_score}/10")
print(f"- Πλατφόρμα: {platform}, Καθημερινή χρήση: {daily_usage} ώρες")
print(f"- Πρόβλεψη μοντέλου: {predicted_level}")
print("- Σύσταση: Βελτίωσε την ποιότητα ύπνου και μείωσε τη χρήση social media όπου είναι δυνατό.")